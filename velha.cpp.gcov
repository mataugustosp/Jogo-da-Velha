        -:    0:Source:velha.cpp
        -:    0:Graph:velha.gcno
        -:    0:Data:velha.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:
        -:    5:
        -:    6:#include "velha.hpp"
        -:    7:
        -:    8:/** 
        -:    9: * @brief verifica situacao do jogo da velha  
        -:   10: * @author Programador 
        -:   11: * @param  velha descreve o parametro
        -:   12: * 
        -:   13: *  Descrever o que a funcao faz
        -:   14: */ 
        -:   15:
        7:   16:int VerificaVelha( int velha[3][3] )
        -:   17:{
        -:   18:	// Verifica se o X venceu 
        7:   19:	if(Vence(velha,1)){
        3:   20:		return 1;
        -:   21:	}
        -:   22:	//Verifica se o O venceu 
        4:   23:	else if(Vence(velha,2)){
        3:   24:		return 1;
        -:   25:	}
        -:   26:	// Caso para jogo empatado
        1:   27:	else if(!Vence(velha,1) && !Vence(velha,2) && !Zero(velha)){
        1:   28:		return 0; 
        -:   29:	}
        -:   30:	else{
    #####:   31:		return 2;
        -:   32:	}
        7:   33:}
        -:   34:
        -:   35:/*!< Funcao usada para verificar e retornar se X ou O venceu */
       13:   36:int Vence(int velha[3][3], int numero){
       13:   37:	if(velha[0][0] == numero && velha[1][1] == numero && velha[2][2] == numero){
        1:   38:		return 1;
        -:   39:	}
       12:   40:	else if(velha[0][2] == numero && velha[1][1] == numero && velha[2][0] == numero){
        1:   41:		return 1;
        -:   42:	}
       11:   43:	else if(velha[0][0] == numero && velha[1][0] == numero && velha[2][0] == numero){
        1:   44:		return 1;
        -:   45:	}
       10:   46:	else if(velha[0][1] == numero && velha[1][1] == numero && velha[2][1] == numero){
    #####:   47:		return 1;
        -:   48:	}
       10:   49:	else if(velha[0][2] == numero && velha[1][2] == numero && velha[2][2] == numero){
        1:   50:		return 1;
        -:   51:	}
        9:   52:	else if(velha[0][0] == numero && velha[0][1] == numero && velha[0][2] == numero){
        2:   53:		return 1;
        -:   54:	}
        7:   55:	else if(velha[1][0] == numero && velha[1][1] == numero && velha[1][2] == numero){
    #####:   56:		return 1;
        -:   57:	}
        7:   58:	else if(velha[2][0] == numero && velha[2][1] == numero && velha[2][2] == numero){
    #####:   59:		return 1;
        -:   60:	}
        -:   61:	else{
        7:   62:		return 0;
        -:   63:	}
       13:   64:}
        -:   65:
        1:   66:int Zero(int velha[3][3]){
        4:   67:	for(int x = 0; x<3;x++){
       12:   68:		for(int y = 0; y<3;y++){
        9:   69:			if(!velha[x][y]){
    #####:   70:				return 1;
        -:   71:			}
        9:   72:		}
        3:   73:	}
        1:   74:	return 0;
        1:   75:}
        -:   76:
        -:   77:
